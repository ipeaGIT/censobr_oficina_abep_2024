{
  "hash": "76f0d44df8bc7ee9f21a27dfe0261692",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfrom: markdown+emoji\ncode-annotations: hover\n---\n\n\n\n\n# Microdados\n\n## Dados disponíveis no {censobr}\n\n\nO **{censobr}** é um pacote de R para acessar os dados e documentação dos censos demográficos do Brasil [@pereira2023censobr]. O pacote disponibiliza microdados da amostra de todas as edições do censo demográfico desde 1960. A Tabela 1 apresenta abaixo todas as bases de dados do censo que você consegue acessar com o **{censobr}**.\n\n**Tabela 1. Funções de dados disponíveis no {censobr}**\n\n\n\n\n```{=html}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <!-- <meta charset=\"UTF-8\"> -->\n  \n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        table, th, td {\n            border: 1px solid black; /* Thicker border for better visibility */\n        }\n        th, td {\n            padding: 10px;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n  <thead>\n    <tr>\n      <th rowspan=\"2\">Função</th>\n      <th rowspan=\"2\">Origem</th>\n      <th rowspan=\"2\">Unidade</th>\n      <th rowspan=\"2\">Definição</th>\n      <th colspan=\"7\">Disponibilidade</th>\n    </tr>\n    <tr>\n      <th>1960</th>\n      <th>70</th>\n      <th>80</th>\n      <th>91</th>\n      <th>2000</th>\n      <th>10</th>\n      <th>22</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>read_population()</td>\n      <td>Amostra</td>\n      <td>Microdado</td>\n      <td>Lê os microdados de pessoas</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td></td>\n      <td>X</td>\n      <td><i>em breve</i></td>\n    </tr>\n    <tr>\n      <td>read_households()</td>\n      <td>Amostra</td>\n      <td>Microdado</td>\n      <td>Lê os microdados de domicílios</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td>X</td>\n      <td><i>em breve</i></td>\n    </tr>\n    <tr>\n      <td>read_families()</td>\n      <td>Amostra</td>\n      <td>Microdado</td>\n      <td>Lê os microdados de famílias do censo de 2000</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>X</td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>read_emigration()</td>\n      <td>Amostra</td>\n      <td>Microdado</td>\n      <td>Lê os microdados de emigração</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>X</td>\n      <td></td>\n      <td><i>em breve</i></td>\n    </tr>\n    <tr>\n      <td>read_mortality()</td>\n      <td>Amostra</td>\n      <td>Microdado</td>\n      <td>Lê os microdados de mortalidade</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>X</td>\n      <td><i>em breve</i></td>\n    </tr>\n    <tr>\n      <td>read_tracts()</td>\n      <td>Universo</td>\n      <td>Setor Censitário</td>\n      <td>Lê os dados do Universo agregados por setores censitários</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>em breve</td>\n      <td>X</td>\n      <td>em breve</td>\n    </tr>\n  </tbody>\n</table>\n\n</body>\n</html>\n```\n\n\n\n\nTodas as funções de leitura de microdados possuem a mesma estrutra (sintaxe), o que permite o usuário baixar os dados de maneira fácil e intuitiva com um único comando. As funções possuem os seguintes parâmetros:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_households(\n  year,          # ano de referência do censo\n  columns,       # seleciona colunas que devem ser lidas\n  add_labels,    # adiciona os 'labels' das variáveis categóricas\n  as_data_frame, # retorna resultado como um `Arrow DataSet` ou `data.frame`\n  showProgress,  # mostra barra de progresso do download\n  cache          # salva arquivo em cache para rapida leitura posteriormente\n  )\n```\n:::\n\n\n\n\n\n::: {.callout-important appearance=\"default\"}\n## Cache local dos dados\n\nA primeira vez que o usuário executa uma função, o **{censobr}** fará o download dos dados e os armazenará localmente numa pasta do pacote. Dessa forma, os dados precisam ser baixados apenas uma vez. Mais informações na seção *Cache de Dados* abaixo.\n\n:::\n\n\n## Trabalhando com dados maior do que a RAM\n\n![](images/arrow_plus_dplyr.png){width=350 fig-align=\"center\"}\n\nÉ muito comum que os microdados do censo brasileiro sejam grandes demais para serem carregados na memória RAM do usuário. Para resolver esse problema, o **{censobr}** foi construído sobre a plataforma [Arrow](https://arrow.apache.org/docs/r/) e arquivos em formato `.parquet`, o que permite que o usuário trabalhe de maneira eficiente até mesmo com bases de dados muito grandes utilizando funções já bem conhecidas do pacote [{dplyr}](https://arrow.apache.org/docs/r/articles/arrow.html#analyzing-arrow-data-with-dplyr).\n\n\nVamos então partir para exemplos na prática, e começar carregando as bibliotecas que usamos.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# carrega bibliotecas\nlibrary(censobr)\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n:::\n\n\n\n\n\n## Dados de população\n\nNeste exemplo, nós vamos criar um gráfico da pirâmica populacional do Brasil no ano de 2010. O primeiro passo é usar a função `read_population()` para carregar os microdados de população.\n\nO comportamento padrão das funções do **{censobr}** é retornar *todas* as variáveis das bases de dados. No entanto, como vamos fazer uma análise simples, o mais eficiente é passarmos um vetor com os nomes das colunas que vamos utilizar. Neste caso, usaremos somente as variáveis de peso amostral, sexo e idade (códigos `\"V0010\"`, `\"V0601\"` e `\"V6036\"`, respectivamente). No último capítulo do curso a gente vai ver como baixar os dicionários variáveis dos censos.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- read_population(\n  year = 2010,\n  columns = c('V0010', 'V0601', 'V6036'),  # <1>\n  add_labels = 'pt',                       # <2>\n  showProgress = FALSE\n  )\n\nclass(pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"arrow_dplyr_query\"\n```\n\n\n:::\n:::\n\n\n\n1. Aumentando eficiência ao ler apenas as colunas que vamos usar\n2. Adicionando os 'labels' em Português das variáveis categóricas.\n\n\nAo rodar o comando `nrow(pop)`, você verá que a tabela de microdados de população do Censo de 2010 tinha mais de vinte milhões de observações (`20.635.472`), mas essas observações não estão carregadas na sua memória RAM. Isso porque, por padrão, a saída da função é um `\"arrow_dplyr_query\"` ou `\"ArrowObject\"`. Isso permite que você trabalhe com os dados do censo de maneira super rápida e eficiente, mesmo que a tabela de dados seja grande demais para a memória do seu computador. Note que se você passar o parâmetro `as_data_frame = TRUE`, a função carregará os dados como um `data.frame` na memória RAM. ***Atenção***: isso pode fazer com que a sessão do R trave em ambientes com pouca memória.\n\nEsse output em arrow pode ser analisado de maneira similar a como se analisaria um `data.frame` utilizando-se funções do pacote {dplyr}. Uma diferença, no entanto, é que as operações somente são executadas e resultados extraídos quando o usuário roda a função `dplyr::collect()`.\n\nNeste exemplo, abaixo, nós visualizamos as primeiras linhas 6 da tabela de dados com `head(pop)`, e somente essas poucas observações são carregas para memória com o commando `collect()`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(pop) |> \n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     V0010     V0601 V6036\n1 8.705865 Masculino    22\n2 8.705865  Feminino    17\n3 9.818689 Masculino    38\n4 9.495608  Feminino    44\n5 9.495608 Masculino    11\n6 9.495608 Masculino    16\n```\n\n\n:::\n:::\n\n\n\n\nO próximo passo para criamos nossa pirâmide populacional é criar um variável categória com grupos de idade. No exemplo abaix, nós utilizadmos grupos de 5 anos.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- pop |>\n  mutate(\n    age_group = dplyr::case_when(\n      V6036 <= 04              ~ \"00-05\",\n      V6036 >= 05 & V6036 < 10 ~ \"05-10\",\n      V6036 >= 10 & V6036 < 15 ~ \"10-15\",\n      V6036 >= 15 & V6036 < 20 ~ \"15-20\",\n      V6036 >= 20 & V6036 < 25 ~ \"20-25\",\n      V6036 >= 25 & V6036 < 30 ~ \"25-30\",\n      V6036 >= 30 & V6036 < 35 ~ \"30-35\",\n      V6036 >= 35 & V6036 < 40 ~ \"35-40\",\n      V6036 >= 40 & V6036 < 45 ~ \"40-45\",\n      V6036 >= 45 & V6036 < 50 ~ \"45-50\",\n      V6036 >= 50 & V6036 < 55 ~ \"50-55\",\n      V6036 >= 55 & V6036 < 60 ~ \"55-60\",\n      V6036 >= 60 & V6036 < 65 ~ \"60-65\",\n      V6036 >= 65 & V6036 < 70 ~ \"65-70\",\n      V6036 >= 70              ~ \"70+\"\n      ))\n\nhead(pop) |> \n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     V0010     V0601 V6036 age_group\n1 8.705865 Masculino    22     20-25\n2 8.705865  Feminino    17     15-20\n3 9.818689 Masculino    38     35-40\n4 9.495608  Feminino    44     40-45\n5 9.495608 Masculino    11     10-15\n6 9.495608 Masculino    16     15-20\n```\n\n\n:::\n:::\n\n\n\n\nE em seguida, nós só precisamos somar o número de homens e mulheres em cada grupo de idade. Para isso, nós somamos os valores da variável de peso amostral `V0010` em cada grupo. Repare que ao chamarmos a função `collect()`, o código é executado e retorna um `data.frame` com a contagem de pessoas por sexo e faixa de idade. Repare que nós processamos todos os mais de 20 milhões de registro do censo, mas só precisamos carregar na memória essa tabela com 30 observações.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# cacula tabela de contagem de pessoas por idade\npiramide_df <- pop |>\n               group_by(V0601, age_group) |>\n               summarise(pop_count = sum(V0010)) |>\n               collect()\n\nhead(piramide_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   V0601 [2]\n  V0601     age_group pop_count\n  <chr>     <chr>         <dbl>\n1 Masculino 20-25      8627665.\n2 Feminino  15-20      8429180.\n3 Masculino 35-40      6767177.\n4 Feminino  40-45      6688525.\n5 Masculino 10-15      8727095.\n6 Masculino 15-20      8557608.\n```\n\n\n:::\n:::\n\n\n\nPronto, no último passo é só fazer o gráfico de pirâmide populacional utilizando o pacote {ggplot2}.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# remove grupo com idade missing `NA`\npiramide_df <- filter(piramide_df, !is.na(age_group))\n\n# transforma a contagem de mulheres para valores negativos\npiramide_df <- piramide_df |>\n  mutate(pop_count = if_else(V0601 == \"Masculino\", pop_count, -pop_count))\n\n# figura\nggplot(data = piramide_df,\n       aes(x = pop_count / 1000,\n           y = age_group,\n           fill = V0601)) +\n  geom_col() +\n  scale_fill_discrete(name=\"\", type=c(\"#ffcb69\",\"#437297\")) +\n  scale_x_continuous(labels = function(x){scales::comma(abs(x))},\n                     breaks = c(-8000, -4000,0,4000, 8000),\n                     name = \"População (em milhares)\") +\n  theme_classic() +\n  theme(\n    legend.position = \"top\",\n    axis.title.y=element_blank(),\n    panel.grid.major.x = element_line(color = \"grey90\")\n  )\n```\n\n::: {.cell-output-display}\n![Pirâmide demográfica, Brasil, 2010](4_microdados_files/figure-html/pop-pyramid-ggplot-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Dados de domicílios\n\n### Saneamento:\n\nNeste exemplo, nós vamos usar os dados de domicílios do censo de 2010 para calcular qual a proporção de domicílios que estavam conectados à rede de esgoto nos municípios de cada região do Brasil. O primeiro passo é baixar os dados utilizando a função `read_households()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndom <- read_households(year = 2010, \n                      showProgress = FALSE)\n```\n:::\n\n\n\n\nAgora vamos (1) agrupar as observações por região e município, (2) obter o número de domicílios conectados à rede de esgoto, (3) obter o número total de domicílios, (4) calcular a proporção de domicílios conectados e (5) coletar os resultados.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nesg <- dom |> \n        compute() |>\n        group_by(name_region, code_muni) |>                  # <1>\n        summarize(rede = sum(V0010[which(V0207=='1')]),      # <2>\n                  total = sum(V0010)) |>                     # <3>\n        mutate(cobertura = rede / total) |>                  # <4>\n        collect()                                            # <5>\n\nhead(esg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n# Groups:   name_region [1]\n  name_region  code_muni   rede  total cobertura\n  <chr>            <int>  <dbl>  <dbl>     <dbl>\n1 Centro-oeste   5000203   73.4  4534.   0.0162 \n2 Centro-oeste   5000252   10.3  1596.   0.00646\n3 Centro-oeste   5000609 2150.  11012.   0.195  \n4 Centro-oeste   5000708 1705.   7419.   0.230  \n5 Centro-oeste   5000807   35.9  2759.   0.0130 \n6 Centro-oeste   5000856   12.4  3053.   0.00407\n```\n\n\n:::\n:::\n\n\n\n1. Agrupar as observações por região e município\n2. Obter o número de domicílios conectados à rede de esgoto\n3. Obter o número total de domicílios\n4. Calcular a proporção de domicílios conectados\n5. Coletar os resultados.\n\n\nUma rápida análise da dispersão dos valores com o *box-plot* abaixo já revela um dos retratos da desigualdade regional brasileira. Em todos municípios da região Norte e quase metade dos municípios da região Nordeste, a gente encontra que menos de 50% dos domicílios estavam conectados à rede de esgoto em 2010. No próximo bloco, nós vamos visualizar como essas diferenças se distribuem espacialmente.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(esg) +\n  geom_boxplot(aes(x=reorder(name_region, -cobertura), y=cobertura, \n                   weight  = rede, color=name_region), \n               show.legend = F, outlier.alpha = 0.1) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x=\"Região\", y=\"Quantidade de domicílios\\nconectados à rede de esgoto\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](4_microdados_files/figure-html/plot-sewage-regions-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Análise espacial com {geobr}\n\nO **{geobr}** é um pacote para baixar dados espaciais oficiais do Brasil [@pereira2019geobr]. Ele inclui uma ampla variedade de dados geoespaciais disponíveis em várias escalas geográficas e para diversos anos, como municípios, regiões metropolitanas, biomas, estabelecimentos de saúde, etc (veja a [lista completa no site do pacote](https://ipeagit.github.io/geobr/)).\n\n\n## Integração entre {censobr} e {geobr}\n\n<div style=\"display: flex; justify-content: space-around;\">\n  ![Image 1](images/censobr_logo.png){width=160 fig-align=\"center\"}\n  ![Image 2](images/geobr_logo_y.png){width=160 fig-align=\"center\"}\n</div>\n\n::: {.callout-information appearance=\"default\"}\n\nTodos os dados do **{censobr}** são enriquecidos com colunas de geografia, seguindo os padrões de nomenclatura do pacote **{geobr}** para facilitar a manipulação e a integração de dados espaciais dos censos demográficos do Brasil. As colunas adicionadas são: `c('code_muni', 'code_state', 'abbrev_state', 'name_state', 'code_region', 'name_region', 'code_weighting', 'code_tract')`.\n\n:::\n\nPara criarmos uma mapa com a distribuição espacial da cobertura da rede de esgoto no Brasil, nós vamos primeiro usar o pacote **{geobr}** para baixar as geometrias dos municípios brasileiros no ano de 2010. Vamos também sobrepor os limites das grandes regiões do país para dar um pouco mais de contexto à figura.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(geobr)\n\nregioes_df <- read_region(year = 2010,\n                          showProgress = FALSE)\n\nmuni_sf <- read_municipality(year = 2010,\n                             showProgress = FALSE)\n\nhead(muni_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -63.61822 ymin: -13.6937 xmax: -60.33317 ymax: -9.66916\nGeodetic CRS:  SIRGAS 2000\n  code_muni             name_muni code_state abbrev_state\n1   1100015 Alta Floresta D'oeste         11           RO\n2   1100023             Ariquemes         11           RO\n3   1100031                Cabixi         11           RO\n4   1100049                Cacoal         11           RO\n5   1100056            Cerejeiras         11           RO\n6   1100064     Colorado Do Oeste         11           RO\n                            geom\n1 MULTIPOLYGON (((-62.2462 -1...\n2 MULTIPOLYGON (((-63.13712 -...\n3 MULTIPOLYGON (((-60.52408 -...\n4 MULTIPOLYGON (((-61.42679 -...\n5 MULTIPOLYGON (((-61.41347 -...\n6 MULTIPOLYGON (((-60.66352 -...\n```\n\n\n:::\n:::\n\n\n\n\nAgora nós só precisamos unir os dados espaciais com nossas estimativas utilizando a variável chave `code_muni` e mapear os resultados.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# merge data\nesg_sf <- dplyr::left_join(muni_sf, esg, by = 'code_muni')\n\n# plot map\nggplot() +\n  geom_sf(data = esg_sf, aes(fill = cobertura), color=NA) +\n  geom_sf(data = regioes_df, color = 'gray20', fill=NA) +\n  labs(title = \"Quantidade de domicílios conectados à rede de esgoto\") +\n  scale_fill_distiller(palette = \"Greens\", direction = 1, \n                       name='Proporção de\\ndomicílios', \n                       labels = scales::percent) +\n  theme_void() +\n  theme(legend.position = 'bottom')\n```\n\n::: {.cell-output-display}\n![](4_microdados_files/figure-html/merge-geobr-censobr-plot-map-1.png){width=672}\n:::\n:::\n\n\n\n\n### Distribuição espacial do valor do aluguel:\n\nNo exemplo anterior, nós agregamos os microdados do censo no nível de municípios. Neste próximo exemplo, faremos uma análise espacial no nível de áreas de ponderação. Aqui nós vamos visualizar como o valor do aluguel varia espacialmente na região metropolitana de São Paulo. \n\nPrimeiro, vamos baixar os municípios da região metropolitana de São Paulo com o **{geobr}**.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetro_sp <- geobr::read_metro_area(year = 2010,\n                                     showProgress = FALSE) |> \n              filter(name_metro == \"RM São Paulo\")\n```\n:::\n\n\n\n\nTambém precisamos dos polígonos das áreas de ponderação. Com o código abaixo, baixamos todas as áreas de ponderação do estado de São Paulo e, em seguida, mantemos apenas aquelas na região metropolitana de São Paulo.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwt_areas <- geobr::read_weighting_area(code_weighting = \"SP\",\n                                       year = 2010,\n                                       simplified = FALSE,\n                                       showProgress = FALSE) # <1>\n\nwt_areas <- filter(wt_areas, code_muni %in% metro_sp$code_muni)\nhead(wt_areas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -46.73454 ymin: -23.64487 xmax: -46.64756 ymax: -23.53528\nGeodetic CRS:  SIRGAS 2000\n  code_weighting code_muni name_muni code_state abbrev_state code_region\n1  3550308005100   3550308 São Paulo         35           SP           3\n2  3550308005102   3550308 São Paulo         35           SP           3\n3  3550308005101   3550308 São Paulo         35           SP           3\n4  3550308005104   3550308 São Paulo         35           SP           3\n5  3550308005103   3550308 São Paulo         35           SP           3\n6  3550308005106   3550308 São Paulo         35           SP           3\n  name_region                           geom\n1     Sudeste MULTIPOLYGON (((-46.67201 -...\n2     Sudeste MULTIPOLYGON (((-46.67663 -...\n3     Sudeste MULTIPOLYGON (((-46.67257 -...\n4     Sudeste MULTIPOLYGON (((-46.70138 -...\n5     Sudeste MULTIPOLYGON (((-46.69581 -...\n6     Sudeste MULTIPOLYGON (((-46.73454 -...\n```\n\n\n:::\n:::\n\n\n\n1. O comportamento padrão do {geobr} é baixar uma versão da malha espacial com geometrias ligeiramente simplificadas (`simplified = TRUE`) para agilizar o processamento e visualização de dados. Aqui, nós baixamos os dados com geometrias originais devido à escala espacial da visualização dos resultados.\n\nAgora voltamos para a base de dados de domicílios do censo de 2010. Com essa base, nós precisamos calcular o valor médio do aluguel gasto em cada área de ponderação. Note que para isso nós usamos a média do aluguel (variável `V2011`) ponderada pelo peso do domicílio (variável `V0010`). Para encontrar esses valores,  o código abaixo (1) filtra apenas as observações nos nossos municípios de interesse, (2) computa temporariamente o resultado, (3) agrupa as observações por área de ponderação, (4) calcula o valor médio do aluguel e (5) coleta os resultados.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrent <- dom |>\n        filter(code_muni %in% metro_sp$code_muni) |>                       # <1>\n        compute() |>                                                       # <2>\n        group_by(code_weighting) |>                                        # <3>\n        summarize(avgrent=weighted.mean(x=V2011, w=V0010, na.rm=TRUE)) |>  # <4>\n        collect()                                                          # <5>\n\nhead(rent)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  code_weighting avgrent\n  <chr>            <dbl>\n1 3503901003001     355.\n2 3503901003002     627.\n3 3503901003003     358.\n4 3505708005001     577.\n5 3505708005002     397.\n6 3505708005003     327.\n```\n\n\n:::\n:::\n\n\n\n1. Filtra apenas as observações nos nossos municípios de interesse\n2. Computa temporariamente o resultado\n3. Agrupa as observações por área de ponderação\n4. Calcula o valor médio do aluguel\n5. Coleta os resultados.\n\n\nPor fim, basta unirmos os dados espaciais com nossas estimativas de aluguel pela variável chave de código da área de ponderação (`code_weighting`), e mapear os resultados.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrent_sf <- left_join(wt_areas, rent, by = 'code_weighting')\n\nggplot() +\n  geom_sf(data = rent_sf, aes(fill = avgrent), color=NA) +\n  geom_sf(data = metro_sp, color='gray', fill=NA) +\n  labs(title = \"Valor médio do aluguel por área de ponderação\",\n       subtitle = \"Região Metropolitana de São Paulo, 2010\") +\n  scale_fill_distiller(palette = \"Purples\", direction = 1, \n                       name='Valores\\nem R$',\n                       labels = scales::number_format(big.mark = \".\")) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](4_microdados_files/figure-html/plot-alugel-areapond-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## Data cache\n\nNa primeira vez que o usuário executa uma função, o **{censobr}** fará o download do arquivo e o armazenará localmente. Dessa forma, os dados só precisam ser baixados uma vez. Quando o parâmetro `cache` está configurado como `TRUE` (que é o comportamento padrão do pacote), a função lerá os dados que já estão armanezados em cache, o que é praticamente instantâneo.\n\nOs usuários podem gerenciar os conjuntos de dados em cache usando a função `censobr_cache()`. Por exemplo, os usuários podem:\n\nListar arquivos em cache:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensobr_cache(list_files = TRUE)\n```\n:::\n\n\n\n\nDeletar um arquivo específico:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensobr_cache(delete_file = \"2010_emigration\")\n```\n:::\n\n\n\n\nDeletar todos arquivos do cache:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensobr_cache(delete_file = \"all\")\n```\n:::\n\n\n\n\nPor padrão, os arquivos do **{censobr}** são salvos no diretório 'User'. No entanto, os usuários podem executar a função `set_censobr_cache_dir()` para definir um diretório de cache personalizado. Note que essa definição personalizada precisa ser definida a cada nova sessão do R.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntempf <- tempdir()\n\nset_censobr_cache_dir(path = tempf)\n```\n:::\n",
    "supporting": [
      "4_microdados_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}